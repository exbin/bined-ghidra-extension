buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }    
    }
}

plugins {
    id 'java'
    id 'distribution'
}
import org.gradle.util.VersionNumber

version = '0.2.0-SNAPSHOT'

sourceCompatibility = '17'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext {
    binedVersion = '0.2.1'
    binaryDataVersion = '0.2.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                options.bootstrapClasspath = files("${System.properties['java.home']}/lib/rt.jar", "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar")
            } else {
                options.bootClasspath = "${System.properties['java.home']}/lib/rt.jar"
                options.bootClasspath += "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar"
            }
        }
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = "tests"
    archiveBaseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java
}

javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.exbin.bined.ghidra.GhidraExtension'
}

task buildPack (type: Zip, dependsOn: tasks.jar) {
    archiveBaseName = "bined-ghidra-extension"
    
    into ('BinedExtension') {
        from (jar) {
            into 'lib'
            rename { filename -> "BinedExtension.jar" }
        }

        from (configurations.runtimeClasspath) {
            into 'lib'
        }

        from ('data') {
            into 'data'
        }
        
        from 'Module.manifest'
        from 'extension.properties'
        from 'LICENSE.txt'
    }
}
// publish.dependsOn buildPack

def binedLibrary = { String libName ->
    return (libName.endsWith('-SNAPSHOT')) ? ":${libName}-${binedVersion}" : "org.exbin.bined:${libName}:${binedVersion}"
}

def binaryDataLibrary = { String libName ->
    return (libName.endsWith('-SNAPSHOT')) ? ":${libName}-${binaryDataVersion}" : "org.exbin.auxiliary:${libName}:${binaryDataVersion}"
}

repositories {
    mavenCentral()
    flatDir {
        dirs "lib"
    }
}

dependencies {
    compileOnly ':ghidra-project'
    compileOnly ':ghidra-base'
    compileOnly ':ghidra-generic'
    compileOnly ':ghidra-gui'
    compileOnly ':ghidra-docking'
    compileOnly ':ghidra-help'
    compileOnly ':ghidra-softwaremodeling'
    compileOnly ':ghidra-utility'
    compileOnly ':ghidra-byteviewer'

    implementation binedLibrary('bined-core')
    implementation binedLibrary('bined-extended')
    implementation binedLibrary('bined-highlight-swing')
    implementation binedLibrary('bined-operation')
    implementation binedLibrary('bined-operation-swing')
    implementation binedLibrary('bined-swing')
    implementation binedLibrary('bined-swing-extended')
    implementation binaryDataLibrary('binary_data')
    implementation binaryDataLibrary('binary_data-paged')
    implementation binaryDataLibrary('binary_data-delta')

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
    implementation "org.jdom:jdom-legacy:1.1.3"

    testImplementation group : 'junit', name: 'junit', version: '4.13.2'
}

jar {
    manifest {
        attributes(
            'Specification-Title': "BinedExtension",
            'Specification-Version': "10.4",
            'Main-Class': mainClass
        )
    }

//    from configurations.compile.findAll { it.name != 'bluejext.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
//    destinationDir = file("$buildDir")
}
